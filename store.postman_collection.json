{
	"info": {
		"_postman_id": "ebee8321-37dd-4cc6-aad7-d059d9c76172",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28398782",
		"_collection_link": "https://i44444-9057.postman.co/workspace/LuxeQuality~22e9c547-0ec4-489f-9294-db793afd7c9d/collection/28398782-ebee8321-37dd-4cc6-aad7-d059d9c76172?action=share&source=collection_link&creator=28398782"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create a new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Extract product id\", function () {\r",
									"    pm.collectionVariables.set(\"productId\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.price).to.be.a('number');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"    pm.expect(responseJson.description).to.be.a('string');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"productName\"));\r",
									"    pm.expect(responseJson.price).to.eql(Number(pm.collectionVariables.get(\"productPrice\")));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"productSku\")));\r",
									"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"productDescription\"));\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"price\": { \"type\": \"integer\" }, \"sku\": { \"type\": \"integer\" }, \"description\": { \"type\": \"string\" }, \"id\": { \"type\": \"integer\" } }, \"required\": [\"name\", \"price\", \"sku\", \"description\", \"id\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{productName}}\",\r\n    \"price\": {{productPrice}},\r\n    \"sku\": {{productSku}},\r\n    \"description\": \"{{productDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.price).to.be.a('number');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"    pm.expect(responseJson.description).to.be.a('string');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"productName\"));\r",
									"    pm.expect(responseJson.price).to.eql(Number(pm.collectionVariables.get(\"productPrice\")));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"productSku\")));\r",
									"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"productDescription\"));\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"price\": { \"type\": \"integer\" }, \"sku\": { \"type\": \"integer\" }, \"description\": { \"type\": \"string\" }, \"id\": { \"type\": \"integer\" } }, \"required\": [\"name\", \"price\", \"sku\", \"description\", \"id\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Paginated list of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Pagination is correct', () => {\r",
									"    pm.expect(response.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=2&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting of products by price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Products are sorted by price', () => {\r",
									"    for (let i = 0; i < response.length - 1; i++) {\r",
									"        pm.expect(response[i].price <= response[i + 1].price).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=price",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.price).to.be.a('number');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"    pm.expect(responseJson.description).to.be.a('string');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"updatedProductName\"));\r",
									"    pm.expect(responseJson.price).to.eql(Number(pm.collectionVariables.get(\"updatedProductPrice\")));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"updatedProductSku\")));\r",
									"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"updatedProductDescription\"));\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"price\": { \"type\": \"integer\" }, \"sku\": { \"type\": \"integer\" }, \"description\": { \"type\": \"string\" }, \"id\": { \"type\": \"integer\" } }, \"required\": [\"name\", \"price\", \"sku\", \"description\", \"id\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{productId}},\r\n    \"name\": \"{{updatedProductName}}\",\r\n    \"price\": {{updatedProductPrice}},\r\n    \"sku\": {{updatedProductSku}},\r\n    \"description\": \"{{updatedProductDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an updated product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.price).to.be.a('number');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"    pm.expect(responseJson.description).to.be.a('string');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"updatedProductName\"));\r",
									"    pm.expect(responseJson.price).to.eql(Number(pm.collectionVariables.get(\"updatedProductPrice\")));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"updatedProductSku\")));\r",
									"    pm.expect(responseJson.description).to.eql(pm.collectionVariables.get(\"updatedProductDescription\"));\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"price\": { \"type\": \"integer\" }, \"sku\": { \"type\": \"integer\" }, \"description\": { \"type\": \"string\" }, \"id\": { \"type\": \"integer\" } }, \"required\": [\"name\", \"price\", \"sku\", \"description\", \"id\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all products after deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('All products are in the list', () => {\r",
									"    pm.expect(response.length).to.eql((Number(pm.collectionVariables.get(\"productId\")))-1);\r",
									"});\r",
									"\r",
									"pm.test('Deleted product is not in the list', () => {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"updatedProductName\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Extract order id\", function () {\r",
									"    pm.collectionVariables.set(\"orderId\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"orderName\"));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"orderSku\")));\r",
									"})\r",
									"\r",
									"const schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"sku\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"sku\"]}\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{orderName}}\",\r\n    \"sku\": {{orderSku}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"orderName\"));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"orderSku\")));\r",
									"})\r",
									"\r",
									"const schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"sku\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"sku\"]}\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('All orders are in the list', () => {\r",
									"    pm.expect(response.length).to.eql(Number(pm.collectionVariables.get(\"orderId\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Paginated list of orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Pagination is correct', () => {\r",
									"    pm.expect(response.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting orders by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Orders are sorted by name', () => {\r",
									"    for (let i = 0; i < response.length - 1; i++) {\r",
									"        const isInOrder = response[i].name.toLowerCase() >= response[i + 1].name.toLowerCase();\r",
									"        pm.expect(isInOrder).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=DESC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"updatedOrderName\"));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"updatedOrderSku\")));\r",
									"})\r",
									"\r",
									"const schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"sku\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"sku\"]}\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{orderId}},\r\n    \"name\": \"{{updatedOrderName}}\",\r\n    \"sku\": {{updatedOrderSku}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an updated order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"The response has correct types\", () => {\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.sku).to.be.a('number');\r",
									"});\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"updatedOrderName\"));\r",
									"    pm.expect(responseJson.sku).to.eql(Number(pm.collectionVariables.get(\"updatedOrderSku\")));\r",
									"})\r",
									"\r",
									"const schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"sku\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"sku\"]}\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all orders after deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('All orders are in the list', () => {\r",
									"    pm.expect(response.length).to.eql((Number(pm.collectionVariables.get(\"orderId\")))-1);\r",
									"});\r",
									"\r",
									"pm.test('Deleted order is not in the list', () => {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"updatedOrderName\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Extract user id\", function () {\r",
									"    pm.collectionVariables.set(\"userId\", responseJson.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.firstName).to.eql(\"Daisy\");\r",
									"    pm.expect(responseJson.lastName).to.eql(\"Dou\");\r",
									"    pm.expect(responseJson.email).to.eql(\"daisy.dou@gmail.com\");\r",
									"    pm.expect(responseJson.dateOfBirth).to.eql(\"1995-11-11\");\r",
									"    pm.expect(responseJson.emailVerified).to.eql(true);\r",
									"    pm.expect(responseJson.signUpDate).to.eql(\"2018-05-12\");\r",
									"    pm.expect(responseJson.status).to.eql(\"active\");\r",
									"    pm.expect(responseJson.level).to.eql(\"admin\");\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"integer\" }, \"firstName\": { \"type\": \"string\" }, \"lastName\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"dateOfBirth\": { \"type\": \"string\" }, \"emailVerified\": { \"type\": \"boolean\" }, \"signUpDate\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" }, \"level\": { \"type\": \"string\" } }, \"required\": [\"id\", \"firstName\", \"lastName\", \"email\", \"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Daisy\",\r\n    \"lastName\": \"Dou\",\r\n    \"email\": \"daisy.dou@gmail.com\",\r\n    \"dateOfBirth\": \"1995-11-11\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2018-05-12\",\r\n    \"status\": \"active\",\r\n    \"level\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.firstName).to.eql(\"Daisy\");\r",
									"    pm.expect(responseJson.lastName).to.eql(\"Dou\");\r",
									"    pm.expect(responseJson.email).to.eql(\"daisy.dou@gmail.com\");\r",
									"    pm.expect(responseJson.dateOfBirth).to.eql(\"1995-11-11\");\r",
									"    pm.expect(responseJson.emailVerified).to.eql(true);\r",
									"    pm.expect(responseJson.signUpDate).to.eql(\"2018-05-12\");\r",
									"    pm.expect(responseJson.status).to.eql(\"active\");\r",
									"    pm.expect(responseJson.level).to.eql(\"admin\");\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"integer\" }, \"firstName\": { \"type\": \"string\" }, \"lastName\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"dateOfBirth\": { \"type\": \"string\" }, \"emailVerified\": { \"type\": \"boolean\" }, \"signUpDate\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" }, \"level\": { \"type\": \"string\" } }, \"required\": [\"id\", \"firstName\", \"lastName\", \"email\", \"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('All users are in the list', () => {\r",
									"    pm.expect(response.length).to.eql(Number(pm.collectionVariables.get(\"userId\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Paginated list of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Pagination is correct', () => {\r",
									"    pm.expect(response.length).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2&pageSize=4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Users are sorted by email', () => {\r",
									"    for (let i = 0; i < response.length - 1; i++) {\r",
									"        const isInOrder = response[i].email <= response[i + 1].email;\r",
									"        pm.expect(isInOrder).to.be.true;\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=ASC&sortKey=email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has correct values\", () => {\r",
									"    pm.expect(responseJson.firstName).to.eql(\"Daisy\");\r",
									"    pm.expect(responseJson.lastName).to.eql(\"Dou\");\r",
									"    pm.expect(responseJson.email).to.eql(\"daisy.dou@yahoo.com\");\r",
									"    pm.expect(responseJson.dateOfBirth).to.eql(\"1995-11-11\");\r",
									"    pm.expect(responseJson.emailVerified).to.eql(true);\r",
									"    pm.expect(responseJson.signUpDate).to.eql(\"2018-05-12\");\r",
									"    pm.expect(responseJson.status).to.eql(\"active\");\r",
									"    pm.expect(responseJson.level).to.eql(\"superadmin\");\r",
									"})\r",
									"\r",
									"const schema = { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"integer\" }, \"firstName\": { \"type\": \"string\" }, \"lastName\": { \"type\": \"string\" }, \"email\": { \"type\": \"string\" }, \"dateOfBirth\": { \"type\": \"string\" }, \"emailVerified\": { \"type\": \"boolean\" }, \"signUpDate\": { \"type\": \"string\" }, \"status\": { \"type\": \"string\" }, \"level\": { \"type\": \"string\" } }, \"required\": [\"id\", \"firstName\", \"lastName\", \"email\", \"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"] }\r",
									"\r",
									"pm.test('Response schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Daisy\",\r\n    \"lastName\": \"Dou\",\r\n    \"email\": \"daisy.dou@yahoo.com\",\r\n    \"dateOfBirth\": \"1995-11-11\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2018-05-12\",\r\n    \"status\": \"active\",\r\n    \"level\": \"superadmin\",\r\n    \"id\": {{userId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of users after deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('All actual users are in the list', () => {\r",
									"    pm.expect(response.length).to.eql((Number(pm.collectionVariables.get(\"userId\"))) - 1);\r",
									"});\r",
									"\r",
									"pm.test('Deleted user is not in the list', () => {\r",
									"    pm.expect(pm.response.text()).to.not.include([\"Daisy\", \"Dou\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "productName",
			"value": "banana",
			"type": "string"
		},
		{
			"key": "productPrice",
			"value": "17",
			"type": "string"
		},
		{
			"key": "productSku",
			"value": "4229825583",
			"type": "string"
		},
		{
			"key": "productDescription",
			"value": "yellow fruit",
			"type": "string"
		},
		{
			"key": "updatedProductName",
			"value": "plum",
			"type": "string"
		},
		{
			"key": "updatedProductPrice",
			"value": "18",
			"type": "string"
		},
		{
			"key": "updatedProductSku",
			"value": "4229873583",
			"type": "string"
		},
		{
			"key": "updatedProductDescription",
			"value": "tasty dark fruit",
			"type": "string"
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "orderName",
			"value": "new order",
			"type": "string"
		},
		{
			"key": "orderSku",
			"value": "123425937656765",
			"type": "string"
		},
		{
			"key": "updatedOrderName",
			"value": "modified order",
			"type": "string"
		},
		{
			"key": "updatedOrderSku",
			"value": "638425937656765",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}